1. more code heavy than last one
2. For theory: stack and post fix operations
3 4 9 + 2 * -
                    26
                    3
                    ____
                    ''''
                    would be -3
Infix to post fix equivalent:
Infix: 
    3 * (4 + 2 * 6) + 5 * 2
Postfix:
        3 4 2 6 * + * 5 2 * +
***only infix to postfix not both ways

Know Object Oriented vocab such as:
attribute
method
private
public
constructor
destructor
default constructor
constant methods

Code-wise emphsis will be on object oriented code.
Will get a header file and be asked to implement the methods
-- Writing a main without getting implementation file
**Will not give pointer classes on exam***
**know how to use ostream. dont need to memorize function because well get header file
Know how to use templatized classes
probably will be a class havent done before and a class have done so 2

For pointers:
declare variable of pointer to an integer, reference,
dereference, What is a pointer? etc.

**dynamic vs static mem allocation
**Meomory leak:
allocated memory that is not accessible;


Three things
1. makes new object
2. allocates memory for thing
3. Calls the constructor


INFIX PREFIX AND POSTFIX

Infix       3 + 4
Prefix      + 3 4 
PostFix     3 4 +

3 4 5 + * equivalent to     3 * 4 + 5

always going to have one fewer operators than numbers

Postfix expressions can be evaluated using a stack
Algorithm:

(1) scan the postfix expression from left to right.
(2) when you encounter an operand push it to the stack
(3) when you encounter an operator, pop twice, operate on what you popped,
    then push the result to the stack
(4) When you've scanned entire input one item wil be on the stack.
    it's the value of the postfix expression

Examples:
    3 4 +
        so it's 7. Remember that stacks typically have to do with computer memory
    8 5 6 * 2 + + 3 - 8 *
        So its 296

Sidenote: rpn calculator. Stands for reverse polish notation

Examples of infix to postix conversion
****WILL BE ON EXAM TWO!!!****
3 + 4
    IS 3 4 +
3 + 4 * 5
    IS 4 5 * 3 +
    OR 3 4 5 * +
6 * 2 + 3 * 4 + 1
    IS 6 2 * 3 4 * + 1 +

6 * 2 + 3 * 4 + 1 => 6 2 * 3 4 * + 1 +
    check precedents so 6 2 then *, then pop and put onto output
    pop off *, then push on the +
        *           stack
    ____+_